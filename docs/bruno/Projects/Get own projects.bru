meta {
  name: Get own projects
  type: http
  seq: 4
}

get {
  url: {{url}}/api/v1/projects/me?status=0&page=1&pageSize=20&status=0&search
  body: multipartForm
  auth: none
}

params:query {
  status: 0
  page: 1
  pageSize: 20
  status: 0
  search: 
}

docs {
  Type information
  
  type ProjectRole int
  
  ----------Accepting query--------------
  type Request struct {
  		Page     uint                   `json:"page" form:"page" binding:"omitempty"`
  		PageSize uint                   `json:"pageSize" form:"pageSize" binding:"omitempty"`
  		Status   constant.ProjectStatus `json:"status" form:"status" binding:"omitempty"`
  		Search   string                 `json:"search" form:"search" binding:"omitempty"`
  	}
  
  Example query string: ?status=0&page=1&pageSize=20&status=1&search
  
  ---------Info---------------
  
  const (
  	ProjectRoleOwner ProjectRole = iota
  	ProjectRoleSignatory
  	ProjectRoleNone
  )
  
  type ProjectSignatory struct {
  	Email      string `json:"email"`
  	ProfileUrl string `json:"profileUrl"`
  }
  
  type ProjectStatus int
  
  const (
  	ProjectStatusPreparing ProjectStatus = iota
  	ProjectStatusProcessing
  	ProjectStatusCompleted
  )
  
  type ProjectResponse struct {
  		ID          string                        `json:"id"`
  		Title       string                        `json:"title"`
  		TemplateUrl string                        `json:"templateUrl"`
  		IsPublic    bool                          `json:"isPublic"`
  		Signatories []repository.ProjectSignatory `json:"signatories"`
  		Status      constant.ProjectStatus        `json:"status"`
  		CreatedAt   *time.Time                    `json:"createdAt"`
  	}
  
  util.ResponseSuccess(ctx, gin.H{
  		"total":     totalCount,
  		"projects":  projectList,
  		"page":      params.Page,
  		"pageSize":  params.PageSize,
  		"totalPage": util.CalculateTotalPage(totalCount, params.PageSize),
  		"search":    params.Search,
  		"status":    params.Status,
  	})
}
