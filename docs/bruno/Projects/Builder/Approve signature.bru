meta {
  name: Approve signature
  type: http
  seq: 3
}

patch {
  url: {{url}}/api/v1/projects/{{projectId}}/builder/signature/{{signatureId}}/approve
  body: multipartForm
  auth: none
}

body:multipart-form {
  signatureFile: @file(/home/yato/Pictures/bit pf.png)
}

vars:pre-request {
  projectId: 6c081e27-b938-46c8-ab3a-0054ace5b548
  signatureId: O5BNuFcrXg7g1hCxwKUpq
}

docs {
  # Signature Approval API Documentation
  
  ## Endpoint: Approve Signature
  
  ```
  POST /api/projects/{projectId}/signatures/{signatureId}/approve
  ```
  
  This endpoint allows authorized signatories to approve and upload their signature for a specific signature annotation within a project.
  
  ### Path Parameters
  
  | Parameter | Type | Description |
  |-----------|------|-------------|
  | projectId | string | Required. The unique identifier of the project containing the signature. |
  | signatureId | string | Required. The unique identifier of the signature annotation to approve. |
  
  ### Request Format
  
  The request should be a multipart form containing:
  
  - `signatureFile`: A signature file (required). Must be one of the allowed file types.
  
  ### File Requirements
  
  - **Required**: Yes
  - **Allowed file types**: Based on `ALLOWED_SIGNATURE_FILE_TYPE` configuration
  - **Common formats**: Typically `.png`, `.jpg`, `.jpeg`, `.pdf`, `.svg`
  
  ### Authorization Requirements
  
  - User must be authenticated
  - User must have `AnnotateSignatureApprove` permission for the project
  - The signature annotation must be assigned to the authenticated user's email
  - Project must be in `draft` status
  - Signature annotation must be in `invited` status
  
  ### Example Request
  
  ```bash
  curl -X POST \
    'https://api.example.com/api/projects/proj-123/signatures/sig-456/approve' \
    -H 'Authorization: Bearer your-jwt-token' \
    -H 'Content-Type: multipart/form-data' \
    -F 'signatureFile=@signature.png'
  ```
  
  ### Success Response
  
  **HTTP Status**: 200 OK
  
  ```json
  {
    "data": null,
    "status": "success"
  }
  ```
  
  ### Error Responses
  
  #### 400 Bad Request - Missing Project ID
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Failed to patch project builder",
      "errors": [
        {
          "field": "projectId",
          "message": "projectId is required"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 400 Bad Request - Missing Signature ID
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Failed to patch project builder",
      "errors": [
        {
          "field": "signatureAnnotateId",
          "message": "signatureAnnotateId is required"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 400 Bad Request - No Signature File
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "No signature file uploaded",
      "errors": [
        {
          "field": "signatureFile",
          "message": "signature file is required"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 400 Bad Request - Invalid File Type
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Invalid file type",
      "errors": [
        {
          "field": "signatureFile",
          "message": "invalid file type"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 400 Bad Request - Project Not in Draft Status
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Failed to patch project builder",
      "errors": [
        {
          "field": "project",
          "message": "project is not in draft status"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 400 Bad Request - Not Assigned Signatory
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Signature approval failed",
      "errors": [
        {
          "field": "notSignatory",
          "message": "the signature cannot be approved because it is not assigned to you"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 400 Bad Request - Invalid Signature Status
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Signature approval failed",
      "errors": [
        {
          "field": "status",
          "message": "the signature cannot be approved because it is not in the invited status"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 401 Unauthorized
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Unauthorized",
      "errors": [
        {
          "field": "",
          "message": "authentication required"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 403 Forbidden - Insufficient Permissions
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "You do not have permission to approve signature",
      "errors": [
        {
          "field": "forbidden",
          "message": "you do not have permission to approve signature"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 404 Not Found - Project Not Found
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Failed to patch project builder",
      "errors": [
        {
          "field": "project",
          "message": "project not found"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 404 Not Found - Signature Not Found
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Signature not found",
      "errors": [
        {
          "field": "notFound",
          "message": "annotate signature not found"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 500 Internal Server Error - File Upload Failed
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Failed to upload file",
      "errors": [
        {
          "field": "",
          "message": "file upload error details"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  #### 500 Internal Server Error - Signature Approval Failed
  
  ```json
  {
    "data": null,
    "error": {
      "detail": "Failed to approve signature",
      "errors": [
        {
          "field": "",
          "message": "failed to approve signature"
        }
      ]
    },
    "status": "failed"
  }
  ```
  
  ### Business Logic Flow
  
  1. **Validation**: Validates required path parameters and file upload
  2. **Authentication**: Verifies user authentication and retrieves user details
  3. **Authorization**: Checks user permissions and project access rights
  4. **Project Status Check**: Ensures project is in draft status
  5. **Signature Validation**: Verifies signature assignment and status
  6. **File Upload**: Uploads signature file to S3 storage
  7. **Database Transaction**: Updates signature status and file information
  8. **Cleanup**: Removes uploaded file if database transaction fails
  
  ### Notes
  
  1. **File Storage**: Signature files are stored in S3 with a unique prefix and organized by project directory
  2. **Transaction Safety**: All database operations are wrapped in a transaction that rolls back on failure
  3. **File Cleanup**: If signature approval fails after file upload, the uploaded file is automatically deleted from S3
  4. **Email Matching**: The signature can only be approved by the user whose email matches the signature annotation's assigned email
  5. **Status Progression**: Signature annotations must be in "invited" status before they can be approved
  6. **Project Permissions**: Users must have specific signature approval permissions for the project
  
  ### Security Considerations
  
  - Authentication is required for all requests
  - Users can only approve signatures assigned to their email address
  - File type validation prevents malicious file uploads
  - Project-level permissions control access to signature approval functionality
  - Database transactions ensure data consistency
}
